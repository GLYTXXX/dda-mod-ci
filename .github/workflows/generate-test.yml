name: Build and upload test suite

on:
  workflow_dispatch:
  schedule:
    - cron: '40 6,18 * * *'
#  push:
#    branches:
#    - main
    
#concurrency:
#  group: test-build-${{ github.event.pull_request.number || github.ref_name }}
#  cancel-in-progress: true

jobs:
  fetch_release:
    runs-on: ubuntu-latest
    outputs: 
      releases: ${{ steps.fetch.outputs.releases }}
    steps:
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: fetch
        run: |
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/CleverRaven/Cataclysm-DDA/releases?per_page=1 > data.json
          matrix=$(
            echo '{ "release" : '
            (jq '[.[]|.tag_name]' data.json | sed 's/[[:space:]]//g')
            echo '}'
              )
          matrix=$(echo $matrix | sed ':a;N;$!ba;s/\n/;/g') 
          matrix1="{ \"release\" : [ \"cdda-experimental-2023-07-23-0530\", \"cdda-experimental-2023-07-22-2222\" ] }"
          echo $matrix1
          echo $matrix
          echo "releases=$matrix" >> $GITHUB_OUTPUT
 # check-matrix:
 #   runs-on: ubuntu-latest
 #   needs: fetch_release
 #   steps:
 #     - name: Check matrix definition
 #       run: |
 #         matrix='${{ needs.fetch_release.outputs.releases }}'
 #         echo $matrix
 #         echo $matrix | jq .
    matrix_build:
    needs: [ fetch_release ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.fetch_release.outputs.releases) }}
    runs-on: ubuntu-latest
    name: ${{ matrix.release }}
    env:
      ZSTD_CLEVEL: 17
      COMPILER: clang++-13 # 指定使用 Clang 13
      TILES: 0
      SOUND: 0
      LOCALIZE: 0
      MODS:
      EXTRA_TEST_OPTS: --error-format=github-action
      PCH: 1
      RELEASE: 1
      ARCHIVE_SUCCESS: basic-build
      CCACHE_LIMIT: 2G
      CCACHE_FILECLONE: true
      CCACHE_HARDLINK: true
      CCACHE_NOCOMPRESS: true
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions: write-all
    steps:
    - name: checkout myself
      uses: actions/checkout@v3

    - name: release
      run: |
        # 创建一个空的 Release，用于之后上传附件
        gh release create ${{matrix.release}} --title ${{matrix.release}} --notes "Automated build of the test suite for this version."

    - name: checkout repository
      uses: actions/checkout@v4
      with:
        repository: 'CleverRaven/Cataclysm-DDA'
        ref: ${{ matrix.release }}

    - name: install dependencies (ubuntu)
      run: |
          sudo apt-get update
          # 在这里把 clang-13 添加到安装列表！
          sudo apt-get install -y clang-13 libncursesw5-dev ccache gettext parallel
          sudo locale-gen en_US.UTF-8 de_DE.UTF-8

    - name: mogai (Apply Patches)
      run: |
        # 克隆包含补丁的仓库
        git clone https://github.com/SurFlurer/dda-mod-ci/ modci
        
        # 设置 Git 用户信息，git am 需要这个
        git config --global user.email "runner@github.com"
        git config --global user.name "runner"

        # 应用补丁。使用 git am 更健壮
        git am modci/patch/0001-disable-test-mode.patch
        git am modci/patch/0004-no-check-mattack-overwrite.patch
        # 注意：原文件里有一个被注释掉的补丁，这里也保持注释
        # git am modci/patch/0002-stop-checking-too-many-mattacks-of-a-type.patch

    - name: prepare
      run: bash ./build-scripts/requirements.sh

    - name: build
      run: bash ./build-scripts/gha_compile_only.sh

    - name: mv exe (Prepare artifact)
      run: |
         # 将编译好的测试程序移动到根目录，方便上传
         mv tests/cata_test ../

    - name: checkout myself (to get context for upload)
      # 这一步是为了让 gh release upload 命令能正确工作
      uses: actions/checkout@v3

    - name: upload executable
      run: |
       # 上传编译好的 cata_test 文件到之前创建的 Release
       gh release upload ${{ matrix.release }} ../cata_test
