name: Build and upload test suite

on:
  # 允许手动触发
  workflow_dispatch:
  # 每天定时运行两次（UTC时间 6:40 和 18:40）
  schedule:
    - cron: '40 6,18 * * *'

jobs:
  # --- 第一个 Job: 获取最新的官方 Release 标签 ---
  fetch_release:
    runs-on: ubuntu-latest
    outputs:
      # 将结果输出，供下一个 Job 使用
      releases: ${{ steps.fetch.outputs.releases }}
    steps:
      - name: Fetch latest CDDA release tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: fetch
        run: |
          # 使用 GitHub API 获取 CleverRaven/Cataclysm-DDA 最新的一个 release
          gh api /repos/CleverRaven/Cataclysm-DDA/releases?per_page=1 > data.json
          
          # 使用 jq 将 release 的 tag_name 提取出来，并构造成 matrix 所需的 JSON 格式
          matrix=$(jq '{ "release": [.[] | .tag_name] }' data.json)
          
          echo "Generated Matrix: $matrix"
          echo "releases=$matrix" >> $GITHUB_OUTPUT

  # --- 第二个 Job: 根据获取到的标签，构建并上传测试程序 ---
  matrix_build:
    # 依赖 fetch_release job 完成
    needs: [ fetch_release ]
    strategy:
      fail-fast: false
      # 从上一个 job 的输出中读取 matrix 配置
      matrix: ${{ fromJSON(needs.fetch_release.outputs.releases) }}
    
    runs-on: ubuntu-latest
    name: Build for ${{ matrix.release }} # Job 的显示名称
    
    # 允许此 Job 写入内容（比如创建 Release）
    permissions:
      contents: write # 允许对仓库内容进行写操作
      packages: write # 允许对包进行写操作
      
    env:
      COMPILER: clang++-13 # 指定使用 Clang 13
      TILES: 0
      SOUND: 0
      LOCALIZE: 0
      PCH: 1
      RELEASE: 1
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: 1. Create Release Placeholder
      # 提前在当前仓库创建一个空的 Release，用于之后上传附件
      # 如果 Release 已存在，此命令会失败但不会中断工作流，这是预期的行为
      run: |
        gh release create ${{ matrix.release }} --title "Test Suite for ${{ matrix.release }}" --notes "Automated build of the test suite for this version." || echo "Release already exists, continuing."
        
    - name: 2. Checkout CDDA Source Code
      # 拉取与 matrix.release 标签版本完全对应的官方 CDDA 源码
      uses: actions/checkout@v4
      with:
        repository: 'CleverRaven/Cataclysm-DDA'
        ref: ${{ matrix.release }}

    - name: 3. Install Build Dependencies
      run: |
        sudo apt-get update
        # 核心修复：在这里安装 clang-13
        sudo apt-get install -y clang-13 libncursesw5-dev ccache gettext parallel patch
        sudo locale-gen en_US.UTF-8 de_DE.UTF-8

    - name: 4. Apply Patches
      run: |
        # 克隆包含补丁文件的仓库到临时目录
        git clone https://github.com/SurFlurer/dda-mod-ci.git modci_repo --depth=1
        
        # 设置 Git 用户信息，git am 需要它
        git config --global user.email "runner@github.com"
        git config --global user.name "GitHub Action Runner"
        
        # 应用补丁来创建一个“宽容版”的源码
        # 使用 --directory=. 来确保补丁在当前 CDDA 源码目录应用
        git apply modci_repo/patch/0001-disable-test-mode.patch
        git apply modci_repo/patch/0004-no-check-mattack-overwrite.patch

    - name: 5. Prepare for Build
      run: bash ./build-scripts/requirements.sh

    - name: 6. Build the Test Suite
      # 运行编译脚本，生成 cata_test 程序
      run: bash ./build-scripts/gha_compile_only.sh

    - name: 7. Upload Test Suite to Release
      # 上传编译好的 cata_test 文件到之前创建的 Release
      run: |
        gh release upload ${{ matrix.release }} tests/cata_test --clobber
